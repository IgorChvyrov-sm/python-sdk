# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeatureSetOrBuilder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repeated_field_encoding': 'str',
        'field_presence': 'str',
        'utf8_validation': 'str',
        'message_encoding': 'str',
        'json_format': 'str',
        'enum_type': 'str',
        'default_instance_for_type': 'Message',
        'initialization_error_string': 'str',
        'descriptor_for_type': 'Descriptor',
        'all_fields': 'dict(str, object)',
        'unknown_fields': 'UnknownFieldSet',
        'initialized': 'bool'
    }

    attribute_map = {
        'repeated_field_encoding': 'repeatedFieldEncoding',
        'field_presence': 'fieldPresence',
        'utf8_validation': 'utf8Validation',
        'message_encoding': 'messageEncoding',
        'json_format': 'jsonFormat',
        'enum_type': 'enumType',
        'default_instance_for_type': 'defaultInstanceForType',
        'initialization_error_string': 'initializationErrorString',
        'descriptor_for_type': 'descriptorForType',
        'all_fields': 'allFields',
        'unknown_fields': 'unknownFields',
        'initialized': 'initialized'
    }

    def __init__(self, repeated_field_encoding=None, field_presence=None, utf8_validation=None, message_encoding=None, json_format=None, enum_type=None, default_instance_for_type=None, initialization_error_string=None, descriptor_for_type=None, all_fields=None, unknown_fields=None, initialized=None):  # noqa: E501
        """FeatureSetOrBuilder - a model defined in Swagger"""  # noqa: E501
        self._repeated_field_encoding = None
        self._field_presence = None
        self._utf8_validation = None
        self._message_encoding = None
        self._json_format = None
        self._enum_type = None
        self._default_instance_for_type = None
        self._initialization_error_string = None
        self._descriptor_for_type = None
        self._all_fields = None
        self._unknown_fields = None
        self._initialized = None
        self.discriminator = None
        if repeated_field_encoding is not None:
            self.repeated_field_encoding = repeated_field_encoding
        if field_presence is not None:
            self.field_presence = field_presence
        if utf8_validation is not None:
            self.utf8_validation = utf8_validation
        if message_encoding is not None:
            self.message_encoding = message_encoding
        if json_format is not None:
            self.json_format = json_format
        if enum_type is not None:
            self.enum_type = enum_type
        if default_instance_for_type is not None:
            self.default_instance_for_type = default_instance_for_type
        if initialization_error_string is not None:
            self.initialization_error_string = initialization_error_string
        if descriptor_for_type is not None:
            self.descriptor_for_type = descriptor_for_type
        if all_fields is not None:
            self.all_fields = all_fields
        if unknown_fields is not None:
            self.unknown_fields = unknown_fields
        if initialized is not None:
            self.initialized = initialized

    @property
    def repeated_field_encoding(self):
        """Gets the repeated_field_encoding of this FeatureSetOrBuilder.  # noqa: E501


        :return: The repeated_field_encoding of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._repeated_field_encoding

    @repeated_field_encoding.setter
    def repeated_field_encoding(self, repeated_field_encoding):
        """Sets the repeated_field_encoding of this FeatureSetOrBuilder.


        :param repeated_field_encoding: The repeated_field_encoding of this FeatureSetOrBuilder.  # noqa: E501
        :type: str
        """
        allowed_values = ["REPEATED_FIELD_ENCODING_UNKNOWN", "PACKED", "EXPANDED"]  # noqa: E501
        if repeated_field_encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `repeated_field_encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(repeated_field_encoding, allowed_values)
            )

        self._repeated_field_encoding = repeated_field_encoding

    @property
    def field_presence(self):
        """Gets the field_presence of this FeatureSetOrBuilder.  # noqa: E501


        :return: The field_presence of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._field_presence

    @field_presence.setter
    def field_presence(self, field_presence):
        """Sets the field_presence of this FeatureSetOrBuilder.


        :param field_presence: The field_presence of this FeatureSetOrBuilder.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIELD_PRESENCE_UNKNOWN", "EXPLICIT", "IMPLICIT", "LEGACY_REQUIRED"]  # noqa: E501
        if field_presence not in allowed_values:
            raise ValueError(
                "Invalid value for `field_presence` ({0}), must be one of {1}"  # noqa: E501
                .format(field_presence, allowed_values)
            )

        self._field_presence = field_presence

    @property
    def utf8_validation(self):
        """Gets the utf8_validation of this FeatureSetOrBuilder.  # noqa: E501


        :return: The utf8_validation of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._utf8_validation

    @utf8_validation.setter
    def utf8_validation(self, utf8_validation):
        """Sets the utf8_validation of this FeatureSetOrBuilder.


        :param utf8_validation: The utf8_validation of this FeatureSetOrBuilder.  # noqa: E501
        :type: str
        """
        allowed_values = ["UTF8_VALIDATION_UNKNOWN", "NONE", "VERIFY"]  # noqa: E501
        if utf8_validation not in allowed_values:
            raise ValueError(
                "Invalid value for `utf8_validation` ({0}), must be one of {1}"  # noqa: E501
                .format(utf8_validation, allowed_values)
            )

        self._utf8_validation = utf8_validation

    @property
    def message_encoding(self):
        """Gets the message_encoding of this FeatureSetOrBuilder.  # noqa: E501


        :return: The message_encoding of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._message_encoding

    @message_encoding.setter
    def message_encoding(self, message_encoding):
        """Sets the message_encoding of this FeatureSetOrBuilder.


        :param message_encoding: The message_encoding of this FeatureSetOrBuilder.  # noqa: E501
        :type: str
        """
        allowed_values = ["MESSAGE_ENCODING_UNKNOWN", "LENGTH_PREFIXED", "DELIMITED"]  # noqa: E501
        if message_encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `message_encoding` ({0}), must be one of {1}"  # noqa: E501
                .format(message_encoding, allowed_values)
            )

        self._message_encoding = message_encoding

    @property
    def json_format(self):
        """Gets the json_format of this FeatureSetOrBuilder.  # noqa: E501


        :return: The json_format of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._json_format

    @json_format.setter
    def json_format(self, json_format):
        """Sets the json_format of this FeatureSetOrBuilder.


        :param json_format: The json_format of this FeatureSetOrBuilder.  # noqa: E501
        :type: str
        """
        allowed_values = ["JSON_FORMAT_UNKNOWN", "ALLOW", "LEGACY_BEST_EFFORT"]  # noqa: E501
        if json_format not in allowed_values:
            raise ValueError(
                "Invalid value for `json_format` ({0}), must be one of {1}"  # noqa: E501
                .format(json_format, allowed_values)
            )

        self._json_format = json_format

    @property
    def enum_type(self):
        """Gets the enum_type of this FeatureSetOrBuilder.  # noqa: E501


        :return: The enum_type of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._enum_type

    @enum_type.setter
    def enum_type(self, enum_type):
        """Sets the enum_type of this FeatureSetOrBuilder.


        :param enum_type: The enum_type of this FeatureSetOrBuilder.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENUM_TYPE_UNKNOWN", "OPEN", "CLOSED"]  # noqa: E501
        if enum_type not in allowed_values:
            raise ValueError(
                "Invalid value for `enum_type` ({0}), must be one of {1}"  # noqa: E501
                .format(enum_type, allowed_values)
            )

        self._enum_type = enum_type

    @property
    def default_instance_for_type(self):
        """Gets the default_instance_for_type of this FeatureSetOrBuilder.  # noqa: E501


        :return: The default_instance_for_type of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: Message
        """
        return self._default_instance_for_type

    @default_instance_for_type.setter
    def default_instance_for_type(self, default_instance_for_type):
        """Sets the default_instance_for_type of this FeatureSetOrBuilder.


        :param default_instance_for_type: The default_instance_for_type of this FeatureSetOrBuilder.  # noqa: E501
        :type: Message
        """

        self._default_instance_for_type = default_instance_for_type

    @property
    def initialization_error_string(self):
        """Gets the initialization_error_string of this FeatureSetOrBuilder.  # noqa: E501


        :return: The initialization_error_string of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: str
        """
        return self._initialization_error_string

    @initialization_error_string.setter
    def initialization_error_string(self, initialization_error_string):
        """Sets the initialization_error_string of this FeatureSetOrBuilder.


        :param initialization_error_string: The initialization_error_string of this FeatureSetOrBuilder.  # noqa: E501
        :type: str
        """

        self._initialization_error_string = initialization_error_string

    @property
    def descriptor_for_type(self):
        """Gets the descriptor_for_type of this FeatureSetOrBuilder.  # noqa: E501


        :return: The descriptor_for_type of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: Descriptor
        """
        return self._descriptor_for_type

    @descriptor_for_type.setter
    def descriptor_for_type(self, descriptor_for_type):
        """Sets the descriptor_for_type of this FeatureSetOrBuilder.


        :param descriptor_for_type: The descriptor_for_type of this FeatureSetOrBuilder.  # noqa: E501
        :type: Descriptor
        """

        self._descriptor_for_type = descriptor_for_type

    @property
    def all_fields(self):
        """Gets the all_fields of this FeatureSetOrBuilder.  # noqa: E501


        :return: The all_fields of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._all_fields

    @all_fields.setter
    def all_fields(self, all_fields):
        """Sets the all_fields of this FeatureSetOrBuilder.


        :param all_fields: The all_fields of this FeatureSetOrBuilder.  # noqa: E501
        :type: dict(str, object)
        """

        self._all_fields = all_fields

    @property
    def unknown_fields(self):
        """Gets the unknown_fields of this FeatureSetOrBuilder.  # noqa: E501


        :return: The unknown_fields of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: UnknownFieldSet
        """
        return self._unknown_fields

    @unknown_fields.setter
    def unknown_fields(self, unknown_fields):
        """Sets the unknown_fields of this FeatureSetOrBuilder.


        :param unknown_fields: The unknown_fields of this FeatureSetOrBuilder.  # noqa: E501
        :type: UnknownFieldSet
        """

        self._unknown_fields = unknown_fields

    @property
    def initialized(self):
        """Gets the initialized of this FeatureSetOrBuilder.  # noqa: E501


        :return: The initialized of this FeatureSetOrBuilder.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this FeatureSetOrBuilder.


        :param initialized: The initialized of this FeatureSetOrBuilder.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureSetOrBuilder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureSetOrBuilder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
