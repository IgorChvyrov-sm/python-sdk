# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'proto': 'FieldDescriptorProto',
        'full_name': 'str',
        'json_name': 'str',
        'file': 'FileDescriptor',
        'extension_scope': 'Descriptor',
        'type': 'str',
        'containing_type': 'Descriptor',
        'message_type': 'Descriptor',
        'containing_oneof': 'OneofDescriptor',
        'enum_type': 'EnumDescriptor',
        'default_value': 'object',
        'map_field': 'bool',
        'java_type': 'str',
        'lite_java_type': 'str',
        'lite_type': 'str',
        'packable': 'bool',
        'packed': 'bool',
        'repeated': 'bool',
        'real_containing_oneof': 'OneofDescriptor',
        'extension': 'bool',
        'options': 'FieldOptions',
        'required': 'bool',
        'optional': 'bool',
        'name': 'str',
        'number': 'int'
    }

    attribute_map = {
        'index': 'index',
        'proto': 'proto',
        'full_name': 'fullName',
        'json_name': 'jsonName',
        'file': 'file',
        'extension_scope': 'extensionScope',
        'type': 'type',
        'containing_type': 'containingType',
        'message_type': 'messageType',
        'containing_oneof': 'containingOneof',
        'enum_type': 'enumType',
        'default_value': 'defaultValue',
        'map_field': 'mapField',
        'java_type': 'javaType',
        'lite_java_type': 'liteJavaType',
        'lite_type': 'liteType',
        'packable': 'packable',
        'packed': 'packed',
        'repeated': 'repeated',
        'real_containing_oneof': 'realContainingOneof',
        'extension': 'extension',
        'options': 'options',
        'required': 'required',
        'optional': 'optional',
        'name': 'name',
        'number': 'number'
    }

    def __init__(self, index=None, proto=None, full_name=None, json_name=None, file=None, extension_scope=None, type=None, containing_type=None, message_type=None, containing_oneof=None, enum_type=None, default_value=None, map_field=None, java_type=None, lite_java_type=None, lite_type=None, packable=None, packed=None, repeated=None, real_containing_oneof=None, extension=None, options=None, required=None, optional=None, name=None, number=None):  # noqa: E501
        """FieldDescriptor - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._proto = None
        self._full_name = None
        self._json_name = None
        self._file = None
        self._extension_scope = None
        self._type = None
        self._containing_type = None
        self._message_type = None
        self._containing_oneof = None
        self._enum_type = None
        self._default_value = None
        self._map_field = None
        self._java_type = None
        self._lite_java_type = None
        self._lite_type = None
        self._packable = None
        self._packed = None
        self._repeated = None
        self._real_containing_oneof = None
        self._extension = None
        self._options = None
        self._required = None
        self._optional = None
        self._name = None
        self._number = None
        self.discriminator = None
        if index is not None:
            self.index = index
        if proto is not None:
            self.proto = proto
        if full_name is not None:
            self.full_name = full_name
        if json_name is not None:
            self.json_name = json_name
        if file is not None:
            self.file = file
        if extension_scope is not None:
            self.extension_scope = extension_scope
        if type is not None:
            self.type = type
        if containing_type is not None:
            self.containing_type = containing_type
        if message_type is not None:
            self.message_type = message_type
        if containing_oneof is not None:
            self.containing_oneof = containing_oneof
        if enum_type is not None:
            self.enum_type = enum_type
        if default_value is not None:
            self.default_value = default_value
        if map_field is not None:
            self.map_field = map_field
        if java_type is not None:
            self.java_type = java_type
        if lite_java_type is not None:
            self.lite_java_type = lite_java_type
        if lite_type is not None:
            self.lite_type = lite_type
        if packable is not None:
            self.packable = packable
        if packed is not None:
            self.packed = packed
        if repeated is not None:
            self.repeated = repeated
        if real_containing_oneof is not None:
            self.real_containing_oneof = real_containing_oneof
        if extension is not None:
            self.extension = extension
        if options is not None:
            self.options = options
        if required is not None:
            self.required = required
        if optional is not None:
            self.optional = optional
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number

    @property
    def index(self):
        """Gets the index of this FieldDescriptor.  # noqa: E501


        :return: The index of this FieldDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this FieldDescriptor.


        :param index: The index of this FieldDescriptor.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def proto(self):
        """Gets the proto of this FieldDescriptor.  # noqa: E501


        :return: The proto of this FieldDescriptor.  # noqa: E501
        :rtype: FieldDescriptorProto
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this FieldDescriptor.


        :param proto: The proto of this FieldDescriptor.  # noqa: E501
        :type: FieldDescriptorProto
        """

        self._proto = proto

    @property
    def full_name(self):
        """Gets the full_name of this FieldDescriptor.  # noqa: E501


        :return: The full_name of this FieldDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this FieldDescriptor.


        :param full_name: The full_name of this FieldDescriptor.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def json_name(self):
        """Gets the json_name of this FieldDescriptor.  # noqa: E501


        :return: The json_name of this FieldDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._json_name

    @json_name.setter
    def json_name(self, json_name):
        """Sets the json_name of this FieldDescriptor.


        :param json_name: The json_name of this FieldDescriptor.  # noqa: E501
        :type: str
        """

        self._json_name = json_name

    @property
    def file(self):
        """Gets the file of this FieldDescriptor.  # noqa: E501


        :return: The file of this FieldDescriptor.  # noqa: E501
        :rtype: FileDescriptor
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FieldDescriptor.


        :param file: The file of this FieldDescriptor.  # noqa: E501
        :type: FileDescriptor
        """

        self._file = file

    @property
    def extension_scope(self):
        """Gets the extension_scope of this FieldDescriptor.  # noqa: E501


        :return: The extension_scope of this FieldDescriptor.  # noqa: E501
        :rtype: Descriptor
        """
        return self._extension_scope

    @extension_scope.setter
    def extension_scope(self, extension_scope):
        """Sets the extension_scope of this FieldDescriptor.


        :param extension_scope: The extension_scope of this FieldDescriptor.  # noqa: E501
        :type: Descriptor
        """

        self._extension_scope = extension_scope

    @property
    def type(self):
        """Gets the type of this FieldDescriptor.  # noqa: E501


        :return: The type of this FieldDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldDescriptor.


        :param type: The type of this FieldDescriptor.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOUBLE", "FLOAT", "INT64", "UINT64", "INT32", "FIXED64", "FIXED32", "BOOL", "STRING", "GROUP", "MESSAGE", "BYTES", "UINT32", "ENUM", "SFIXED32", "SFIXED64", "SINT32", "SINT64"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def containing_type(self):
        """Gets the containing_type of this FieldDescriptor.  # noqa: E501


        :return: The containing_type of this FieldDescriptor.  # noqa: E501
        :rtype: Descriptor
        """
        return self._containing_type

    @containing_type.setter
    def containing_type(self, containing_type):
        """Sets the containing_type of this FieldDescriptor.


        :param containing_type: The containing_type of this FieldDescriptor.  # noqa: E501
        :type: Descriptor
        """

        self._containing_type = containing_type

    @property
    def message_type(self):
        """Gets the message_type of this FieldDescriptor.  # noqa: E501


        :return: The message_type of this FieldDescriptor.  # noqa: E501
        :rtype: Descriptor
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this FieldDescriptor.


        :param message_type: The message_type of this FieldDescriptor.  # noqa: E501
        :type: Descriptor
        """

        self._message_type = message_type

    @property
    def containing_oneof(self):
        """Gets the containing_oneof of this FieldDescriptor.  # noqa: E501


        :return: The containing_oneof of this FieldDescriptor.  # noqa: E501
        :rtype: OneofDescriptor
        """
        return self._containing_oneof

    @containing_oneof.setter
    def containing_oneof(self, containing_oneof):
        """Sets the containing_oneof of this FieldDescriptor.


        :param containing_oneof: The containing_oneof of this FieldDescriptor.  # noqa: E501
        :type: OneofDescriptor
        """

        self._containing_oneof = containing_oneof

    @property
    def enum_type(self):
        """Gets the enum_type of this FieldDescriptor.  # noqa: E501


        :return: The enum_type of this FieldDescriptor.  # noqa: E501
        :rtype: EnumDescriptor
        """
        return self._enum_type

    @enum_type.setter
    def enum_type(self, enum_type):
        """Sets the enum_type of this FieldDescriptor.


        :param enum_type: The enum_type of this FieldDescriptor.  # noqa: E501
        :type: EnumDescriptor
        """

        self._enum_type = enum_type

    @property
    def default_value(self):
        """Gets the default_value of this FieldDescriptor.  # noqa: E501


        :return: The default_value of this FieldDescriptor.  # noqa: E501
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this FieldDescriptor.


        :param default_value: The default_value of this FieldDescriptor.  # noqa: E501
        :type: object
        """

        self._default_value = default_value

    @property
    def map_field(self):
        """Gets the map_field of this FieldDescriptor.  # noqa: E501


        :return: The map_field of this FieldDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._map_field

    @map_field.setter
    def map_field(self, map_field):
        """Sets the map_field of this FieldDescriptor.


        :param map_field: The map_field of this FieldDescriptor.  # noqa: E501
        :type: bool
        """

        self._map_field = map_field

    @property
    def java_type(self):
        """Gets the java_type of this FieldDescriptor.  # noqa: E501


        :return: The java_type of this FieldDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._java_type

    @java_type.setter
    def java_type(self, java_type):
        """Sets the java_type of this FieldDescriptor.


        :param java_type: The java_type of this FieldDescriptor.  # noqa: E501
        :type: str
        """
        allowed_values = ["INT", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "STRING", "BYTE_STRING", "ENUM", "MESSAGE"]  # noqa: E501
        if java_type not in allowed_values:
            raise ValueError(
                "Invalid value for `java_type` ({0}), must be one of {1}"  # noqa: E501
                .format(java_type, allowed_values)
            )

        self._java_type = java_type

    @property
    def lite_java_type(self):
        """Gets the lite_java_type of this FieldDescriptor.  # noqa: E501


        :return: The lite_java_type of this FieldDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._lite_java_type

    @lite_java_type.setter
    def lite_java_type(self, lite_java_type):
        """Sets the lite_java_type of this FieldDescriptor.


        :param lite_java_type: The lite_java_type of this FieldDescriptor.  # noqa: E501
        :type: str
        """
        allowed_values = ["INT", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "STRING", "BYTE_STRING", "ENUM", "MESSAGE"]  # noqa: E501
        if lite_java_type not in allowed_values:
            raise ValueError(
                "Invalid value for `lite_java_type` ({0}), must be one of {1}"  # noqa: E501
                .format(lite_java_type, allowed_values)
            )

        self._lite_java_type = lite_java_type

    @property
    def lite_type(self):
        """Gets the lite_type of this FieldDescriptor.  # noqa: E501


        :return: The lite_type of this FieldDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._lite_type

    @lite_type.setter
    def lite_type(self, lite_type):
        """Sets the lite_type of this FieldDescriptor.


        :param lite_type: The lite_type of this FieldDescriptor.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOUBLE", "FLOAT", "INT64", "UINT64", "INT32", "FIXED64", "FIXED32", "BOOL", "STRING", "GROUP", "MESSAGE", "BYTES", "UINT32", "ENUM", "SFIXED32", "SFIXED64", "SINT32", "SINT64"]  # noqa: E501
        if lite_type not in allowed_values:
            raise ValueError(
                "Invalid value for `lite_type` ({0}), must be one of {1}"  # noqa: E501
                .format(lite_type, allowed_values)
            )

        self._lite_type = lite_type

    @property
    def packable(self):
        """Gets the packable of this FieldDescriptor.  # noqa: E501


        :return: The packable of this FieldDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._packable

    @packable.setter
    def packable(self, packable):
        """Sets the packable of this FieldDescriptor.


        :param packable: The packable of this FieldDescriptor.  # noqa: E501
        :type: bool
        """

        self._packable = packable

    @property
    def packed(self):
        """Gets the packed of this FieldDescriptor.  # noqa: E501


        :return: The packed of this FieldDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._packed

    @packed.setter
    def packed(self, packed):
        """Sets the packed of this FieldDescriptor.


        :param packed: The packed of this FieldDescriptor.  # noqa: E501
        :type: bool
        """

        self._packed = packed

    @property
    def repeated(self):
        """Gets the repeated of this FieldDescriptor.  # noqa: E501


        :return: The repeated of this FieldDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._repeated

    @repeated.setter
    def repeated(self, repeated):
        """Sets the repeated of this FieldDescriptor.


        :param repeated: The repeated of this FieldDescriptor.  # noqa: E501
        :type: bool
        """

        self._repeated = repeated

    @property
    def real_containing_oneof(self):
        """Gets the real_containing_oneof of this FieldDescriptor.  # noqa: E501


        :return: The real_containing_oneof of this FieldDescriptor.  # noqa: E501
        :rtype: OneofDescriptor
        """
        return self._real_containing_oneof

    @real_containing_oneof.setter
    def real_containing_oneof(self, real_containing_oneof):
        """Sets the real_containing_oneof of this FieldDescriptor.


        :param real_containing_oneof: The real_containing_oneof of this FieldDescriptor.  # noqa: E501
        :type: OneofDescriptor
        """

        self._real_containing_oneof = real_containing_oneof

    @property
    def extension(self):
        """Gets the extension of this FieldDescriptor.  # noqa: E501


        :return: The extension of this FieldDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this FieldDescriptor.


        :param extension: The extension of this FieldDescriptor.  # noqa: E501
        :type: bool
        """

        self._extension = extension

    @property
    def options(self):
        """Gets the options of this FieldDescriptor.  # noqa: E501


        :return: The options of this FieldDescriptor.  # noqa: E501
        :rtype: FieldOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FieldDescriptor.


        :param options: The options of this FieldDescriptor.  # noqa: E501
        :type: FieldOptions
        """

        self._options = options

    @property
    def required(self):
        """Gets the required of this FieldDescriptor.  # noqa: E501


        :return: The required of this FieldDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this FieldDescriptor.


        :param required: The required of this FieldDescriptor.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def optional(self):
        """Gets the optional of this FieldDescriptor.  # noqa: E501


        :return: The optional of this FieldDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this FieldDescriptor.


        :param optional: The optional of this FieldDescriptor.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    @property
    def name(self):
        """Gets the name of this FieldDescriptor.  # noqa: E501


        :return: The name of this FieldDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldDescriptor.


        :param name: The name of this FieldDescriptor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this FieldDescriptor.  # noqa: E501


        :return: The number of this FieldDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this FieldDescriptor.


        :param number: The number of this FieldDescriptor.  # noqa: E501
        :type: int
        """

        self._number = number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
