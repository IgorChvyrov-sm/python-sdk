# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldDescriptorProto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unknown_fields': 'UnknownFieldSet',
        'label': 'str',
        'name_bytes': 'ByteString',
        'default_instance_for_type': 'FieldDescriptorProto',
        'parser_for_type': 'ParserFieldDescriptorProto',
        'serialized_size': 'int',
        'default_value_bytes': 'ByteString',
        'type_name_bytes': 'ByteString',
        'extendee_bytes': 'ByteString',
        'json_name_bytes': 'ByteString',
        'options_or_builder': 'FieldOptionsOrBuilder',
        'json_name': 'str',
        'proto3_optional': 'bool',
        'oneof_index': 'int',
        'extendee': 'str',
        'options': 'FieldOptions',
        'initialized': 'bool',
        'name': 'str',
        'type_name': 'str',
        'type': 'str',
        'default_value': 'str',
        'number': 'int',
        'initialization_error_string': 'str',
        'descriptor_for_type': 'Descriptor',
        'all_fields': 'dict(str, object)',
        'memoized_serialized_size': 'int'
    }

    attribute_map = {
        'unknown_fields': 'unknownFields',
        'label': 'label',
        'name_bytes': 'nameBytes',
        'default_instance_for_type': 'defaultInstanceForType',
        'parser_for_type': 'parserForType',
        'serialized_size': 'serializedSize',
        'default_value_bytes': 'defaultValueBytes',
        'type_name_bytes': 'typeNameBytes',
        'extendee_bytes': 'extendeeBytes',
        'json_name_bytes': 'jsonNameBytes',
        'options_or_builder': 'optionsOrBuilder',
        'json_name': 'jsonName',
        'proto3_optional': 'proto3Optional',
        'oneof_index': 'oneofIndex',
        'extendee': 'extendee',
        'options': 'options',
        'initialized': 'initialized',
        'name': 'name',
        'type_name': 'typeName',
        'type': 'type',
        'default_value': 'defaultValue',
        'number': 'number',
        'initialization_error_string': 'initializationErrorString',
        'descriptor_for_type': 'descriptorForType',
        'all_fields': 'allFields',
        'memoized_serialized_size': 'memoizedSerializedSize'
    }

    def __init__(self, unknown_fields=None, label=None, name_bytes=None, default_instance_for_type=None, parser_for_type=None, serialized_size=None, default_value_bytes=None, type_name_bytes=None, extendee_bytes=None, json_name_bytes=None, options_or_builder=None, json_name=None, proto3_optional=None, oneof_index=None, extendee=None, options=None, initialized=None, name=None, type_name=None, type=None, default_value=None, number=None, initialization_error_string=None, descriptor_for_type=None, all_fields=None, memoized_serialized_size=None):  # noqa: E501
        """FieldDescriptorProto - a model defined in Swagger"""  # noqa: E501
        self._unknown_fields = None
        self._label = None
        self._name_bytes = None
        self._default_instance_for_type = None
        self._parser_for_type = None
        self._serialized_size = None
        self._default_value_bytes = None
        self._type_name_bytes = None
        self._extendee_bytes = None
        self._json_name_bytes = None
        self._options_or_builder = None
        self._json_name = None
        self._proto3_optional = None
        self._oneof_index = None
        self._extendee = None
        self._options = None
        self._initialized = None
        self._name = None
        self._type_name = None
        self._type = None
        self._default_value = None
        self._number = None
        self._initialization_error_string = None
        self._descriptor_for_type = None
        self._all_fields = None
        self._memoized_serialized_size = None
        self.discriminator = None
        if unknown_fields is not None:
            self.unknown_fields = unknown_fields
        if label is not None:
            self.label = label
        if name_bytes is not None:
            self.name_bytes = name_bytes
        if default_instance_for_type is not None:
            self.default_instance_for_type = default_instance_for_type
        if parser_for_type is not None:
            self.parser_for_type = parser_for_type
        if serialized_size is not None:
            self.serialized_size = serialized_size
        if default_value_bytes is not None:
            self.default_value_bytes = default_value_bytes
        if type_name_bytes is not None:
            self.type_name_bytes = type_name_bytes
        if extendee_bytes is not None:
            self.extendee_bytes = extendee_bytes
        if json_name_bytes is not None:
            self.json_name_bytes = json_name_bytes
        if options_or_builder is not None:
            self.options_or_builder = options_or_builder
        if json_name is not None:
            self.json_name = json_name
        if proto3_optional is not None:
            self.proto3_optional = proto3_optional
        if oneof_index is not None:
            self.oneof_index = oneof_index
        if extendee is not None:
            self.extendee = extendee
        if options is not None:
            self.options = options
        if initialized is not None:
            self.initialized = initialized
        if name is not None:
            self.name = name
        if type_name is not None:
            self.type_name = type_name
        if type is not None:
            self.type = type
        if default_value is not None:
            self.default_value = default_value
        if number is not None:
            self.number = number
        if initialization_error_string is not None:
            self.initialization_error_string = initialization_error_string
        if descriptor_for_type is not None:
            self.descriptor_for_type = descriptor_for_type
        if all_fields is not None:
            self.all_fields = all_fields
        if memoized_serialized_size is not None:
            self.memoized_serialized_size = memoized_serialized_size

    @property
    def unknown_fields(self):
        """Gets the unknown_fields of this FieldDescriptorProto.  # noqa: E501


        :return: The unknown_fields of this FieldDescriptorProto.  # noqa: E501
        :rtype: UnknownFieldSet
        """
        return self._unknown_fields

    @unknown_fields.setter
    def unknown_fields(self, unknown_fields):
        """Sets the unknown_fields of this FieldDescriptorProto.


        :param unknown_fields: The unknown_fields of this FieldDescriptorProto.  # noqa: E501
        :type: UnknownFieldSet
        """

        self._unknown_fields = unknown_fields

    @property
    def label(self):
        """Gets the label of this FieldDescriptorProto.  # noqa: E501


        :return: The label of this FieldDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FieldDescriptorProto.


        :param label: The label of this FieldDescriptorProto.  # noqa: E501
        :type: str
        """
        allowed_values = ["LABEL_OPTIONAL", "LABEL_REPEATED", "LABEL_REQUIRED"]  # noqa: E501
        if label not in allowed_values:
            raise ValueError(
                "Invalid value for `label` ({0}), must be one of {1}"  # noqa: E501
                .format(label, allowed_values)
            )

        self._label = label

    @property
    def name_bytes(self):
        """Gets the name_bytes of this FieldDescriptorProto.  # noqa: E501


        :return: The name_bytes of this FieldDescriptorProto.  # noqa: E501
        :rtype: ByteString
        """
        return self._name_bytes

    @name_bytes.setter
    def name_bytes(self, name_bytes):
        """Sets the name_bytes of this FieldDescriptorProto.


        :param name_bytes: The name_bytes of this FieldDescriptorProto.  # noqa: E501
        :type: ByteString
        """

        self._name_bytes = name_bytes

    @property
    def default_instance_for_type(self):
        """Gets the default_instance_for_type of this FieldDescriptorProto.  # noqa: E501


        :return: The default_instance_for_type of this FieldDescriptorProto.  # noqa: E501
        :rtype: FieldDescriptorProto
        """
        return self._default_instance_for_type

    @default_instance_for_type.setter
    def default_instance_for_type(self, default_instance_for_type):
        """Sets the default_instance_for_type of this FieldDescriptorProto.


        :param default_instance_for_type: The default_instance_for_type of this FieldDescriptorProto.  # noqa: E501
        :type: FieldDescriptorProto
        """

        self._default_instance_for_type = default_instance_for_type

    @property
    def parser_for_type(self):
        """Gets the parser_for_type of this FieldDescriptorProto.  # noqa: E501


        :return: The parser_for_type of this FieldDescriptorProto.  # noqa: E501
        :rtype: ParserFieldDescriptorProto
        """
        return self._parser_for_type

    @parser_for_type.setter
    def parser_for_type(self, parser_for_type):
        """Sets the parser_for_type of this FieldDescriptorProto.


        :param parser_for_type: The parser_for_type of this FieldDescriptorProto.  # noqa: E501
        :type: ParserFieldDescriptorProto
        """

        self._parser_for_type = parser_for_type

    @property
    def serialized_size(self):
        """Gets the serialized_size of this FieldDescriptorProto.  # noqa: E501


        :return: The serialized_size of this FieldDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._serialized_size

    @serialized_size.setter
    def serialized_size(self, serialized_size):
        """Sets the serialized_size of this FieldDescriptorProto.


        :param serialized_size: The serialized_size of this FieldDescriptorProto.  # noqa: E501
        :type: int
        """

        self._serialized_size = serialized_size

    @property
    def default_value_bytes(self):
        """Gets the default_value_bytes of this FieldDescriptorProto.  # noqa: E501


        :return: The default_value_bytes of this FieldDescriptorProto.  # noqa: E501
        :rtype: ByteString
        """
        return self._default_value_bytes

    @default_value_bytes.setter
    def default_value_bytes(self, default_value_bytes):
        """Sets the default_value_bytes of this FieldDescriptorProto.


        :param default_value_bytes: The default_value_bytes of this FieldDescriptorProto.  # noqa: E501
        :type: ByteString
        """

        self._default_value_bytes = default_value_bytes

    @property
    def type_name_bytes(self):
        """Gets the type_name_bytes of this FieldDescriptorProto.  # noqa: E501


        :return: The type_name_bytes of this FieldDescriptorProto.  # noqa: E501
        :rtype: ByteString
        """
        return self._type_name_bytes

    @type_name_bytes.setter
    def type_name_bytes(self, type_name_bytes):
        """Sets the type_name_bytes of this FieldDescriptorProto.


        :param type_name_bytes: The type_name_bytes of this FieldDescriptorProto.  # noqa: E501
        :type: ByteString
        """

        self._type_name_bytes = type_name_bytes

    @property
    def extendee_bytes(self):
        """Gets the extendee_bytes of this FieldDescriptorProto.  # noqa: E501


        :return: The extendee_bytes of this FieldDescriptorProto.  # noqa: E501
        :rtype: ByteString
        """
        return self._extendee_bytes

    @extendee_bytes.setter
    def extendee_bytes(self, extendee_bytes):
        """Sets the extendee_bytes of this FieldDescriptorProto.


        :param extendee_bytes: The extendee_bytes of this FieldDescriptorProto.  # noqa: E501
        :type: ByteString
        """

        self._extendee_bytes = extendee_bytes

    @property
    def json_name_bytes(self):
        """Gets the json_name_bytes of this FieldDescriptorProto.  # noqa: E501


        :return: The json_name_bytes of this FieldDescriptorProto.  # noqa: E501
        :rtype: ByteString
        """
        return self._json_name_bytes

    @json_name_bytes.setter
    def json_name_bytes(self, json_name_bytes):
        """Sets the json_name_bytes of this FieldDescriptorProto.


        :param json_name_bytes: The json_name_bytes of this FieldDescriptorProto.  # noqa: E501
        :type: ByteString
        """

        self._json_name_bytes = json_name_bytes

    @property
    def options_or_builder(self):
        """Gets the options_or_builder of this FieldDescriptorProto.  # noqa: E501


        :return: The options_or_builder of this FieldDescriptorProto.  # noqa: E501
        :rtype: FieldOptionsOrBuilder
        """
        return self._options_or_builder

    @options_or_builder.setter
    def options_or_builder(self, options_or_builder):
        """Sets the options_or_builder of this FieldDescriptorProto.


        :param options_or_builder: The options_or_builder of this FieldDescriptorProto.  # noqa: E501
        :type: FieldOptionsOrBuilder
        """

        self._options_or_builder = options_or_builder

    @property
    def json_name(self):
        """Gets the json_name of this FieldDescriptorProto.  # noqa: E501


        :return: The json_name of this FieldDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._json_name

    @json_name.setter
    def json_name(self, json_name):
        """Sets the json_name of this FieldDescriptorProto.


        :param json_name: The json_name of this FieldDescriptorProto.  # noqa: E501
        :type: str
        """

        self._json_name = json_name

    @property
    def proto3_optional(self):
        """Gets the proto3_optional of this FieldDescriptorProto.  # noqa: E501


        :return: The proto3_optional of this FieldDescriptorProto.  # noqa: E501
        :rtype: bool
        """
        return self._proto3_optional

    @proto3_optional.setter
    def proto3_optional(self, proto3_optional):
        """Sets the proto3_optional of this FieldDescriptorProto.


        :param proto3_optional: The proto3_optional of this FieldDescriptorProto.  # noqa: E501
        :type: bool
        """

        self._proto3_optional = proto3_optional

    @property
    def oneof_index(self):
        """Gets the oneof_index of this FieldDescriptorProto.  # noqa: E501


        :return: The oneof_index of this FieldDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._oneof_index

    @oneof_index.setter
    def oneof_index(self, oneof_index):
        """Sets the oneof_index of this FieldDescriptorProto.


        :param oneof_index: The oneof_index of this FieldDescriptorProto.  # noqa: E501
        :type: int
        """

        self._oneof_index = oneof_index

    @property
    def extendee(self):
        """Gets the extendee of this FieldDescriptorProto.  # noqa: E501


        :return: The extendee of this FieldDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._extendee

    @extendee.setter
    def extendee(self, extendee):
        """Sets the extendee of this FieldDescriptorProto.


        :param extendee: The extendee of this FieldDescriptorProto.  # noqa: E501
        :type: str
        """

        self._extendee = extendee

    @property
    def options(self):
        """Gets the options of this FieldDescriptorProto.  # noqa: E501


        :return: The options of this FieldDescriptorProto.  # noqa: E501
        :rtype: FieldOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FieldDescriptorProto.


        :param options: The options of this FieldDescriptorProto.  # noqa: E501
        :type: FieldOptions
        """

        self._options = options

    @property
    def initialized(self):
        """Gets the initialized of this FieldDescriptorProto.  # noqa: E501


        :return: The initialized of this FieldDescriptorProto.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this FieldDescriptorProto.


        :param initialized: The initialized of this FieldDescriptorProto.  # noqa: E501
        :type: bool
        """

        self._initialized = initialized

    @property
    def name(self):
        """Gets the name of this FieldDescriptorProto.  # noqa: E501


        :return: The name of this FieldDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldDescriptorProto.


        :param name: The name of this FieldDescriptorProto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type_name(self):
        """Gets the type_name of this FieldDescriptorProto.  # noqa: E501


        :return: The type_name of this FieldDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this FieldDescriptorProto.


        :param type_name: The type_name of this FieldDescriptorProto.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def type(self):
        """Gets the type of this FieldDescriptorProto.  # noqa: E501


        :return: The type of this FieldDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldDescriptorProto.


        :param type: The type of this FieldDescriptorProto.  # noqa: E501
        :type: str
        """
        allowed_values = ["TYPE_DOUBLE", "TYPE_FLOAT", "TYPE_INT64", "TYPE_UINT64", "TYPE_INT32", "TYPE_FIXED64", "TYPE_FIXED32", "TYPE_BOOL", "TYPE_STRING", "TYPE_GROUP", "TYPE_MESSAGE", "TYPE_BYTES", "TYPE_UINT32", "TYPE_ENUM", "TYPE_SFIXED32", "TYPE_SFIXED64", "TYPE_SINT32", "TYPE_SINT64"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def default_value(self):
        """Gets the default_value of this FieldDescriptorProto.  # noqa: E501


        :return: The default_value of this FieldDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this FieldDescriptorProto.


        :param default_value: The default_value of this FieldDescriptorProto.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def number(self):
        """Gets the number of this FieldDescriptorProto.  # noqa: E501


        :return: The number of this FieldDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this FieldDescriptorProto.


        :param number: The number of this FieldDescriptorProto.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def initialization_error_string(self):
        """Gets the initialization_error_string of this FieldDescriptorProto.  # noqa: E501


        :return: The initialization_error_string of this FieldDescriptorProto.  # noqa: E501
        :rtype: str
        """
        return self._initialization_error_string

    @initialization_error_string.setter
    def initialization_error_string(self, initialization_error_string):
        """Sets the initialization_error_string of this FieldDescriptorProto.


        :param initialization_error_string: The initialization_error_string of this FieldDescriptorProto.  # noqa: E501
        :type: str
        """

        self._initialization_error_string = initialization_error_string

    @property
    def descriptor_for_type(self):
        """Gets the descriptor_for_type of this FieldDescriptorProto.  # noqa: E501


        :return: The descriptor_for_type of this FieldDescriptorProto.  # noqa: E501
        :rtype: Descriptor
        """
        return self._descriptor_for_type

    @descriptor_for_type.setter
    def descriptor_for_type(self, descriptor_for_type):
        """Sets the descriptor_for_type of this FieldDescriptorProto.


        :param descriptor_for_type: The descriptor_for_type of this FieldDescriptorProto.  # noqa: E501
        :type: Descriptor
        """

        self._descriptor_for_type = descriptor_for_type

    @property
    def all_fields(self):
        """Gets the all_fields of this FieldDescriptorProto.  # noqa: E501


        :return: The all_fields of this FieldDescriptorProto.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._all_fields

    @all_fields.setter
    def all_fields(self, all_fields):
        """Sets the all_fields of this FieldDescriptorProto.


        :param all_fields: The all_fields of this FieldDescriptorProto.  # noqa: E501
        :type: dict(str, object)
        """

        self._all_fields = all_fields

    @property
    def memoized_serialized_size(self):
        """Gets the memoized_serialized_size of this FieldDescriptorProto.  # noqa: E501


        :return: The memoized_serialized_size of this FieldDescriptorProto.  # noqa: E501
        :rtype: int
        """
        return self._memoized_serialized_size

    @memoized_serialized_size.setter
    def memoized_serialized_size(self, memoized_serialized_size):
        """Sets the memoized_serialized_size of this FieldDescriptorProto.


        :param memoized_serialized_size: The memoized_serialized_size of this FieldDescriptorProto.  # noqa: E501
        :type: int
        """

        self._memoized_serialized_size = memoized_serialized_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldDescriptorProto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldDescriptorProto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
