# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MethodDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index': 'int',
        'proto': 'MethodDescriptorProto',
        'full_name': 'str',
        'file': 'FileDescriptor',
        'service': 'ServiceDescriptor',
        'input_type': 'Descriptor',
        'output_type': 'Descriptor',
        'client_streaming': 'bool',
        'server_streaming': 'bool',
        'options': 'MethodOptions',
        'name': 'str'
    }

    attribute_map = {
        'index': 'index',
        'proto': 'proto',
        'full_name': 'fullName',
        'file': 'file',
        'service': 'service',
        'input_type': 'inputType',
        'output_type': 'outputType',
        'client_streaming': 'clientStreaming',
        'server_streaming': 'serverStreaming',
        'options': 'options',
        'name': 'name'
    }

    def __init__(self, index=None, proto=None, full_name=None, file=None, service=None, input_type=None, output_type=None, client_streaming=None, server_streaming=None, options=None, name=None):  # noqa: E501
        """MethodDescriptor - a model defined in Swagger"""  # noqa: E501
        self._index = None
        self._proto = None
        self._full_name = None
        self._file = None
        self._service = None
        self._input_type = None
        self._output_type = None
        self._client_streaming = None
        self._server_streaming = None
        self._options = None
        self._name = None
        self.discriminator = None
        if index is not None:
            self.index = index
        if proto is not None:
            self.proto = proto
        if full_name is not None:
            self.full_name = full_name
        if file is not None:
            self.file = file
        if service is not None:
            self.service = service
        if input_type is not None:
            self.input_type = input_type
        if output_type is not None:
            self.output_type = output_type
        if client_streaming is not None:
            self.client_streaming = client_streaming
        if server_streaming is not None:
            self.server_streaming = server_streaming
        if options is not None:
            self.options = options
        if name is not None:
            self.name = name

    @property
    def index(self):
        """Gets the index of this MethodDescriptor.  # noqa: E501


        :return: The index of this MethodDescriptor.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this MethodDescriptor.


        :param index: The index of this MethodDescriptor.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def proto(self):
        """Gets the proto of this MethodDescriptor.  # noqa: E501


        :return: The proto of this MethodDescriptor.  # noqa: E501
        :rtype: MethodDescriptorProto
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this MethodDescriptor.


        :param proto: The proto of this MethodDescriptor.  # noqa: E501
        :type: MethodDescriptorProto
        """

        self._proto = proto

    @property
    def full_name(self):
        """Gets the full_name of this MethodDescriptor.  # noqa: E501


        :return: The full_name of this MethodDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this MethodDescriptor.


        :param full_name: The full_name of this MethodDescriptor.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def file(self):
        """Gets the file of this MethodDescriptor.  # noqa: E501


        :return: The file of this MethodDescriptor.  # noqa: E501
        :rtype: FileDescriptor
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this MethodDescriptor.


        :param file: The file of this MethodDescriptor.  # noqa: E501
        :type: FileDescriptor
        """

        self._file = file

    @property
    def service(self):
        """Gets the service of this MethodDescriptor.  # noqa: E501


        :return: The service of this MethodDescriptor.  # noqa: E501
        :rtype: ServiceDescriptor
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this MethodDescriptor.


        :param service: The service of this MethodDescriptor.  # noqa: E501
        :type: ServiceDescriptor
        """

        self._service = service

    @property
    def input_type(self):
        """Gets the input_type of this MethodDescriptor.  # noqa: E501


        :return: The input_type of this MethodDescriptor.  # noqa: E501
        :rtype: Descriptor
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """Sets the input_type of this MethodDescriptor.


        :param input_type: The input_type of this MethodDescriptor.  # noqa: E501
        :type: Descriptor
        """

        self._input_type = input_type

    @property
    def output_type(self):
        """Gets the output_type of this MethodDescriptor.  # noqa: E501


        :return: The output_type of this MethodDescriptor.  # noqa: E501
        :rtype: Descriptor
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this MethodDescriptor.


        :param output_type: The output_type of this MethodDescriptor.  # noqa: E501
        :type: Descriptor
        """

        self._output_type = output_type

    @property
    def client_streaming(self):
        """Gets the client_streaming of this MethodDescriptor.  # noqa: E501


        :return: The client_streaming of this MethodDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._client_streaming

    @client_streaming.setter
    def client_streaming(self, client_streaming):
        """Sets the client_streaming of this MethodDescriptor.


        :param client_streaming: The client_streaming of this MethodDescriptor.  # noqa: E501
        :type: bool
        """

        self._client_streaming = client_streaming

    @property
    def server_streaming(self):
        """Gets the server_streaming of this MethodDescriptor.  # noqa: E501


        :return: The server_streaming of this MethodDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._server_streaming

    @server_streaming.setter
    def server_streaming(self, server_streaming):
        """Sets the server_streaming of this MethodDescriptor.


        :param server_streaming: The server_streaming of this MethodDescriptor.  # noqa: E501
        :type: bool
        """

        self._server_streaming = server_streaming

    @property
    def options(self):
        """Gets the options of this MethodDescriptor.  # noqa: E501


        :return: The options of this MethodDescriptor.  # noqa: E501
        :rtype: MethodOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this MethodDescriptor.


        :param options: The options of this MethodDescriptor.  # noqa: E501
        :type: MethodOptions
        """

        self._options = options

    @property
    def name(self):
        """Gets the name of this MethodDescriptor.  # noqa: E501


        :return: The name of this MethodDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MethodDescriptor.


        :param name: The name of this MethodDescriptor.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MethodDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MethodDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
