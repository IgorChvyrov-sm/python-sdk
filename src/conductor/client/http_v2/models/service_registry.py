# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceRegistry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'circuit_breaker_enabled': 'bool',
        'config': 'Config',
        'methods': 'list[ServiceMethod]',
        'name': 'str',
        'request_params': 'list[RequestParam]',
        'service_uri': 'str',
        'type': 'str'
    }

    attribute_map = {
        'circuit_breaker_enabled': 'circuitBreakerEnabled',
        'config': 'config',
        'methods': 'methods',
        'name': 'name',
        'request_params': 'requestParams',
        'service_uri': 'serviceURI',
        'type': 'type'
    }

    def __init__(self, circuit_breaker_enabled=None, config=None, methods=None, name=None, request_params=None, service_uri=None, type=None):  # noqa: E501
        """ServiceRegistry - a model defined in Swagger"""  # noqa: E501
        self._circuit_breaker_enabled = None
        self._config = None
        self._methods = None
        self._name = None
        self._request_params = None
        self._service_uri = None
        self._type = None
        self.discriminator = None
        if circuit_breaker_enabled is not None:
            self.circuit_breaker_enabled = circuit_breaker_enabled
        if config is not None:
            self.config = config
        if methods is not None:
            self.methods = methods
        if name is not None:
            self.name = name
        if request_params is not None:
            self.request_params = request_params
        if service_uri is not None:
            self.service_uri = service_uri
        if type is not None:
            self.type = type

    @property
    def circuit_breaker_enabled(self):
        """Gets the circuit_breaker_enabled of this ServiceRegistry.  # noqa: E501


        :return: The circuit_breaker_enabled of this ServiceRegistry.  # noqa: E501
        :rtype: bool
        """
        return self._circuit_breaker_enabled

    @circuit_breaker_enabled.setter
    def circuit_breaker_enabled(self, circuit_breaker_enabled):
        """Sets the circuit_breaker_enabled of this ServiceRegistry.


        :param circuit_breaker_enabled: The circuit_breaker_enabled of this ServiceRegistry.  # noqa: E501
        :type: bool
        """

        self._circuit_breaker_enabled = circuit_breaker_enabled

    @property
    def config(self):
        """Gets the config of this ServiceRegistry.  # noqa: E501


        :return: The config of this ServiceRegistry.  # noqa: E501
        :rtype: Config
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ServiceRegistry.


        :param config: The config of this ServiceRegistry.  # noqa: E501
        :type: Config
        """

        self._config = config

    @property
    def methods(self):
        """Gets the methods of this ServiceRegistry.  # noqa: E501


        :return: The methods of this ServiceRegistry.  # noqa: E501
        :rtype: list[ServiceMethod]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this ServiceRegistry.


        :param methods: The methods of this ServiceRegistry.  # noqa: E501
        :type: list[ServiceMethod]
        """

        self._methods = methods

    @property
    def name(self):
        """Gets the name of this ServiceRegistry.  # noqa: E501


        :return: The name of this ServiceRegistry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceRegistry.


        :param name: The name of this ServiceRegistry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def request_params(self):
        """Gets the request_params of this ServiceRegistry.  # noqa: E501


        :return: The request_params of this ServiceRegistry.  # noqa: E501
        :rtype: list[RequestParam]
        """
        return self._request_params

    @request_params.setter
    def request_params(self, request_params):
        """Sets the request_params of this ServiceRegistry.


        :param request_params: The request_params of this ServiceRegistry.  # noqa: E501
        :type: list[RequestParam]
        """

        self._request_params = request_params

    @property
    def service_uri(self):
        """Gets the service_uri of this ServiceRegistry.  # noqa: E501


        :return: The service_uri of this ServiceRegistry.  # noqa: E501
        :rtype: str
        """
        return self._service_uri

    @service_uri.setter
    def service_uri(self, service_uri):
        """Sets the service_uri of this ServiceRegistry.


        :param service_uri: The service_uri of this ServiceRegistry.  # noqa: E501
        :type: str
        """

        self._service_uri = service_uri

    @property
    def type(self):
        """Gets the type of this ServiceRegistry.  # noqa: E501


        :return: The type of this ServiceRegistry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceRegistry.


        :param type: The type of this ServiceRegistry.  # noqa: E501
        :type: str
        """
        allowed_values = ["HTTP", "gRPC", "MCP_REMOTE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceRegistry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceRegistry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
