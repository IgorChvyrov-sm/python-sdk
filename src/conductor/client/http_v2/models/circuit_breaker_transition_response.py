# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CircuitBreakerTransitionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_state': 'str',
        'message': 'str',
        'previous_state': 'str',
        'service': 'str',
        'transition_timestamp': 'int'
    }

    attribute_map = {
        'current_state': 'currentState',
        'message': 'message',
        'previous_state': 'previousState',
        'service': 'service',
        'transition_timestamp': 'transitionTimestamp'
    }

    def __init__(self, current_state=None, message=None, previous_state=None, service=None, transition_timestamp=None):  # noqa: E501
        """CircuitBreakerTransitionResponse - a model defined in Swagger"""  # noqa: E501
        self._current_state = None
        self._message = None
        self._previous_state = None
        self._service = None
        self._transition_timestamp = None
        self.discriminator = None
        if current_state is not None:
            self.current_state = current_state
        if message is not None:
            self.message = message
        if previous_state is not None:
            self.previous_state = previous_state
        if service is not None:
            self.service = service
        if transition_timestamp is not None:
            self.transition_timestamp = transition_timestamp

    @property
    def current_state(self):
        """Gets the current_state of this CircuitBreakerTransitionResponse.  # noqa: E501


        :return: The current_state of this CircuitBreakerTransitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this CircuitBreakerTransitionResponse.


        :param current_state: The current_state of this CircuitBreakerTransitionResponse.  # noqa: E501
        :type: str
        """

        self._current_state = current_state

    @property
    def message(self):
        """Gets the message of this CircuitBreakerTransitionResponse.  # noqa: E501


        :return: The message of this CircuitBreakerTransitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CircuitBreakerTransitionResponse.


        :param message: The message of this CircuitBreakerTransitionResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def previous_state(self):
        """Gets the previous_state of this CircuitBreakerTransitionResponse.  # noqa: E501


        :return: The previous_state of this CircuitBreakerTransitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._previous_state

    @previous_state.setter
    def previous_state(self, previous_state):
        """Sets the previous_state of this CircuitBreakerTransitionResponse.


        :param previous_state: The previous_state of this CircuitBreakerTransitionResponse.  # noqa: E501
        :type: str
        """

        self._previous_state = previous_state

    @property
    def service(self):
        """Gets the service of this CircuitBreakerTransitionResponse.  # noqa: E501


        :return: The service of this CircuitBreakerTransitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this CircuitBreakerTransitionResponse.


        :param service: The service of this CircuitBreakerTransitionResponse.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def transition_timestamp(self):
        """Gets the transition_timestamp of this CircuitBreakerTransitionResponse.  # noqa: E501


        :return: The transition_timestamp of this CircuitBreakerTransitionResponse.  # noqa: E501
        :rtype: int
        """
        return self._transition_timestamp

    @transition_timestamp.setter
    def transition_timestamp(self, transition_timestamp):
        """Sets the transition_timestamp of this CircuitBreakerTransitionResponse.


        :param transition_timestamp: The transition_timestamp of this CircuitBreakerTransitionResponse.  # noqa: E501
        :type: int
        """

        self._transition_timestamp = transition_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CircuitBreakerTransitionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CircuitBreakerTransitionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
