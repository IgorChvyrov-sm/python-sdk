# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenLimit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api': 'str',
        'create_time': 'int',
        'created_by': 'str',
        'integration_name': 'str',
        'max_tokens': 'int',
        'owner_app': 'str',
        'token_limit_period': 'str',
        'update_time': 'int',
        'updated_by': 'str'
    }

    attribute_map = {
        'api': 'api',
        'create_time': 'createTime',
        'created_by': 'createdBy',
        'integration_name': 'integrationName',
        'max_tokens': 'maxTokens',
        'owner_app': 'ownerApp',
        'token_limit_period': 'tokenLimitPeriod',
        'update_time': 'updateTime',
        'updated_by': 'updatedBy'
    }

    def __init__(self, api=None, create_time=None, created_by=None, integration_name=None, max_tokens=None, owner_app=None, token_limit_period=None, update_time=None, updated_by=None):  # noqa: E501
        """TokenLimit - a model defined in Swagger"""  # noqa: E501
        self._api = None
        self._create_time = None
        self._created_by = None
        self._integration_name = None
        self._max_tokens = None
        self._owner_app = None
        self._token_limit_period = None
        self._update_time = None
        self._updated_by = None
        self.discriminator = None
        if api is not None:
            self.api = api
        if create_time is not None:
            self.create_time = create_time
        if created_by is not None:
            self.created_by = created_by
        if integration_name is not None:
            self.integration_name = integration_name
        if max_tokens is not None:
            self.max_tokens = max_tokens
        if owner_app is not None:
            self.owner_app = owner_app
        if token_limit_period is not None:
            self.token_limit_period = token_limit_period
        if update_time is not None:
            self.update_time = update_time
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def api(self):
        """Gets the api of this TokenLimit.  # noqa: E501


        :return: The api of this TokenLimit.  # noqa: E501
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this TokenLimit.


        :param api: The api of this TokenLimit.  # noqa: E501
        :type: str
        """

        self._api = api

    @property
    def create_time(self):
        """Gets the create_time of this TokenLimit.  # noqa: E501


        :return: The create_time of this TokenLimit.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this TokenLimit.


        :param create_time: The create_time of this TokenLimit.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def created_by(self):
        """Gets the created_by of this TokenLimit.  # noqa: E501


        :return: The created_by of this TokenLimit.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TokenLimit.


        :param created_by: The created_by of this TokenLimit.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def integration_name(self):
        """Gets the integration_name of this TokenLimit.  # noqa: E501


        :return: The integration_name of this TokenLimit.  # noqa: E501
        :rtype: str
        """
        return self._integration_name

    @integration_name.setter
    def integration_name(self, integration_name):
        """Sets the integration_name of this TokenLimit.


        :param integration_name: The integration_name of this TokenLimit.  # noqa: E501
        :type: str
        """

        self._integration_name = integration_name

    @property
    def max_tokens(self):
        """Gets the max_tokens of this TokenLimit.  # noqa: E501


        :return: The max_tokens of this TokenLimit.  # noqa: E501
        :rtype: int
        """
        return self._max_tokens

    @max_tokens.setter
    def max_tokens(self, max_tokens):
        """Sets the max_tokens of this TokenLimit.


        :param max_tokens: The max_tokens of this TokenLimit.  # noqa: E501
        :type: int
        """

        self._max_tokens = max_tokens

    @property
    def owner_app(self):
        """Gets the owner_app of this TokenLimit.  # noqa: E501


        :return: The owner_app of this TokenLimit.  # noqa: E501
        :rtype: str
        """
        return self._owner_app

    @owner_app.setter
    def owner_app(self, owner_app):
        """Sets the owner_app of this TokenLimit.


        :param owner_app: The owner_app of this TokenLimit.  # noqa: E501
        :type: str
        """

        self._owner_app = owner_app

    @property
    def token_limit_period(self):
        """Gets the token_limit_period of this TokenLimit.  # noqa: E501


        :return: The token_limit_period of this TokenLimit.  # noqa: E501
        :rtype: str
        """
        return self._token_limit_period

    @token_limit_period.setter
    def token_limit_period(self, token_limit_period):
        """Sets the token_limit_period of this TokenLimit.


        :param token_limit_period: The token_limit_period of this TokenLimit.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAY", "MONTH"]  # noqa: E501
        if token_limit_period not in allowed_values:
            raise ValueError(
                "Invalid value for `token_limit_period` ({0}), must be one of {1}"  # noqa: E501
                .format(token_limit_period, allowed_values)
            )

        self._token_limit_period = token_limit_period

    @property
    def update_time(self):
        """Gets the update_time of this TokenLimit.  # noqa: E501


        :return: The update_time of this TokenLimit.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this TokenLimit.


        :param update_time: The update_time of this TokenLimit.  # noqa: E501
        :type: int
        """

        self._update_time = update_time

    @property
    def updated_by(self):
        """Gets the updated_by of this TokenLimit.  # noqa: E501


        :return: The updated_by of this TokenLimit.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this TokenLimit.


        :param updated_by: The updated_by of this TokenLimit.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenLimit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenLimit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
