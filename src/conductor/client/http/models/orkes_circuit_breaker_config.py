# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrkesCircuitBreakerConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'automatic_transition_from_open_to_half_open_enabled': 'bool',
        'failure_rate_threshold': 'float',
        'max_wait_duration_in_half_open_state': 'int',
        'minimum_number_of_calls': 'int',
        'permitted_number_of_calls_in_half_open_state': 'int',
        'sliding_window_size': 'int',
        'slow_call_duration_threshold': 'int',
        'slow_call_rate_threshold': 'float',
        'wait_duration_in_open_state': 'int'
    }

    attribute_map = {
        'automatic_transition_from_open_to_half_open_enabled': 'automaticTransitionFromOpenToHalfOpenEnabled',
        'failure_rate_threshold': 'failureRateThreshold',
        'max_wait_duration_in_half_open_state': 'maxWaitDurationInHalfOpenState',
        'minimum_number_of_calls': 'minimumNumberOfCalls',
        'permitted_number_of_calls_in_half_open_state': 'permittedNumberOfCallsInHalfOpenState',
        'sliding_window_size': 'slidingWindowSize',
        'slow_call_duration_threshold': 'slowCallDurationThreshold',
        'slow_call_rate_threshold': 'slowCallRateThreshold',
        'wait_duration_in_open_state': 'waitDurationInOpenState'
    }

    def __init__(self, automatic_transition_from_open_to_half_open_enabled=None, failure_rate_threshold=None, max_wait_duration_in_half_open_state=None, minimum_number_of_calls=None, permitted_number_of_calls_in_half_open_state=None, sliding_window_size=None, slow_call_duration_threshold=None, slow_call_rate_threshold=None, wait_duration_in_open_state=None):  # noqa: E501
        """OrkesCircuitBreakerConfig - a model defined in Swagger"""  # noqa: E501
        self._automatic_transition_from_open_to_half_open_enabled = None
        self._failure_rate_threshold = None
        self._max_wait_duration_in_half_open_state = None
        self._minimum_number_of_calls = None
        self._permitted_number_of_calls_in_half_open_state = None
        self._sliding_window_size = None
        self._slow_call_duration_threshold = None
        self._slow_call_rate_threshold = None
        self._wait_duration_in_open_state = None
        self.discriminator = None
        if automatic_transition_from_open_to_half_open_enabled is not None:
            self.automatic_transition_from_open_to_half_open_enabled = automatic_transition_from_open_to_half_open_enabled
        if failure_rate_threshold is not None:
            self.failure_rate_threshold = failure_rate_threshold
        if max_wait_duration_in_half_open_state is not None:
            self.max_wait_duration_in_half_open_state = max_wait_duration_in_half_open_state
        if minimum_number_of_calls is not None:
            self.minimum_number_of_calls = minimum_number_of_calls
        if permitted_number_of_calls_in_half_open_state is not None:
            self.permitted_number_of_calls_in_half_open_state = permitted_number_of_calls_in_half_open_state
        if sliding_window_size is not None:
            self.sliding_window_size = sliding_window_size
        if slow_call_duration_threshold is not None:
            self.slow_call_duration_threshold = slow_call_duration_threshold
        if slow_call_rate_threshold is not None:
            self.slow_call_rate_threshold = slow_call_rate_threshold
        if wait_duration_in_open_state is not None:
            self.wait_duration_in_open_state = wait_duration_in_open_state

    @property
    def automatic_transition_from_open_to_half_open_enabled(self):
        """Gets the automatic_transition_from_open_to_half_open_enabled of this OrkesCircuitBreakerConfig.  # noqa: E501


        :return: The automatic_transition_from_open_to_half_open_enabled of this OrkesCircuitBreakerConfig.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_transition_from_open_to_half_open_enabled

    @automatic_transition_from_open_to_half_open_enabled.setter
    def automatic_transition_from_open_to_half_open_enabled(self, automatic_transition_from_open_to_half_open_enabled):
        """Sets the automatic_transition_from_open_to_half_open_enabled of this OrkesCircuitBreakerConfig.


        :param automatic_transition_from_open_to_half_open_enabled: The automatic_transition_from_open_to_half_open_enabled of this OrkesCircuitBreakerConfig.  # noqa: E501
        :type: bool
        """

        self._automatic_transition_from_open_to_half_open_enabled = automatic_transition_from_open_to_half_open_enabled

    @property
    def failure_rate_threshold(self):
        """Gets the failure_rate_threshold of this OrkesCircuitBreakerConfig.  # noqa: E501


        :return: The failure_rate_threshold of this OrkesCircuitBreakerConfig.  # noqa: E501
        :rtype: float
        """
        return self._failure_rate_threshold

    @failure_rate_threshold.setter
    def failure_rate_threshold(self, failure_rate_threshold):
        """Sets the failure_rate_threshold of this OrkesCircuitBreakerConfig.


        :param failure_rate_threshold: The failure_rate_threshold of this OrkesCircuitBreakerConfig.  # noqa: E501
        :type: float
        """

        self._failure_rate_threshold = failure_rate_threshold

    @property
    def max_wait_duration_in_half_open_state(self):
        """Gets the max_wait_duration_in_half_open_state of this OrkesCircuitBreakerConfig.  # noqa: E501


        :return: The max_wait_duration_in_half_open_state of this OrkesCircuitBreakerConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_wait_duration_in_half_open_state

    @max_wait_duration_in_half_open_state.setter
    def max_wait_duration_in_half_open_state(self, max_wait_duration_in_half_open_state):
        """Sets the max_wait_duration_in_half_open_state of this OrkesCircuitBreakerConfig.


        :param max_wait_duration_in_half_open_state: The max_wait_duration_in_half_open_state of this OrkesCircuitBreakerConfig.  # noqa: E501
        :type: int
        """

        self._max_wait_duration_in_half_open_state = max_wait_duration_in_half_open_state

    @property
    def minimum_number_of_calls(self):
        """Gets the minimum_number_of_calls of this OrkesCircuitBreakerConfig.  # noqa: E501


        :return: The minimum_number_of_calls of this OrkesCircuitBreakerConfig.  # noqa: E501
        :rtype: int
        """
        return self._minimum_number_of_calls

    @minimum_number_of_calls.setter
    def minimum_number_of_calls(self, minimum_number_of_calls):
        """Sets the minimum_number_of_calls of this OrkesCircuitBreakerConfig.


        :param minimum_number_of_calls: The minimum_number_of_calls of this OrkesCircuitBreakerConfig.  # noqa: E501
        :type: int
        """

        self._minimum_number_of_calls = minimum_number_of_calls

    @property
    def permitted_number_of_calls_in_half_open_state(self):
        """Gets the permitted_number_of_calls_in_half_open_state of this OrkesCircuitBreakerConfig.  # noqa: E501


        :return: The permitted_number_of_calls_in_half_open_state of this OrkesCircuitBreakerConfig.  # noqa: E501
        :rtype: int
        """
        return self._permitted_number_of_calls_in_half_open_state

    @permitted_number_of_calls_in_half_open_state.setter
    def permitted_number_of_calls_in_half_open_state(self, permitted_number_of_calls_in_half_open_state):
        """Sets the permitted_number_of_calls_in_half_open_state of this OrkesCircuitBreakerConfig.


        :param permitted_number_of_calls_in_half_open_state: The permitted_number_of_calls_in_half_open_state of this OrkesCircuitBreakerConfig.  # noqa: E501
        :type: int
        """

        self._permitted_number_of_calls_in_half_open_state = permitted_number_of_calls_in_half_open_state

    @property
    def sliding_window_size(self):
        """Gets the sliding_window_size of this OrkesCircuitBreakerConfig.  # noqa: E501


        :return: The sliding_window_size of this OrkesCircuitBreakerConfig.  # noqa: E501
        :rtype: int
        """
        return self._sliding_window_size

    @sliding_window_size.setter
    def sliding_window_size(self, sliding_window_size):
        """Sets the sliding_window_size of this OrkesCircuitBreakerConfig.


        :param sliding_window_size: The sliding_window_size of this OrkesCircuitBreakerConfig.  # noqa: E501
        :type: int
        """

        self._sliding_window_size = sliding_window_size

    @property
    def slow_call_duration_threshold(self):
        """Gets the slow_call_duration_threshold of this OrkesCircuitBreakerConfig.  # noqa: E501


        :return: The slow_call_duration_threshold of this OrkesCircuitBreakerConfig.  # noqa: E501
        :rtype: int
        """
        return self._slow_call_duration_threshold

    @slow_call_duration_threshold.setter
    def slow_call_duration_threshold(self, slow_call_duration_threshold):
        """Sets the slow_call_duration_threshold of this OrkesCircuitBreakerConfig.


        :param slow_call_duration_threshold: The slow_call_duration_threshold of this OrkesCircuitBreakerConfig.  # noqa: E501
        :type: int
        """

        self._slow_call_duration_threshold = slow_call_duration_threshold

    @property
    def slow_call_rate_threshold(self):
        """Gets the slow_call_rate_threshold of this OrkesCircuitBreakerConfig.  # noqa: E501


        :return: The slow_call_rate_threshold of this OrkesCircuitBreakerConfig.  # noqa: E501
        :rtype: float
        """
        return self._slow_call_rate_threshold

    @slow_call_rate_threshold.setter
    def slow_call_rate_threshold(self, slow_call_rate_threshold):
        """Sets the slow_call_rate_threshold of this OrkesCircuitBreakerConfig.


        :param slow_call_rate_threshold: The slow_call_rate_threshold of this OrkesCircuitBreakerConfig.  # noqa: E501
        :type: float
        """

        self._slow_call_rate_threshold = slow_call_rate_threshold

    @property
    def wait_duration_in_open_state(self):
        """Gets the wait_duration_in_open_state of this OrkesCircuitBreakerConfig.  # noqa: E501


        :return: The wait_duration_in_open_state of this OrkesCircuitBreakerConfig.  # noqa: E501
        :rtype: int
        """
        return self._wait_duration_in_open_state

    @wait_duration_in_open_state.setter
    def wait_duration_in_open_state(self, wait_duration_in_open_state):
        """Sets the wait_duration_in_open_state of this OrkesCircuitBreakerConfig.


        :param wait_duration_in_open_state: The wait_duration_in_open_state of this OrkesCircuitBreakerConfig.  # noqa: E501
        :type: int
        """

        self._wait_duration_in_open_state = wait_duration_in_open_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrkesCircuitBreakerConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrkesCircuitBreakerConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
