# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HumanTaskDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_completion_strategy': 'str',
        'assignments': 'list[HumanTaskAssignment]',
        'display_name': 'str',
        'full_template': 'HumanTaskTemplate',
        'task_triggers': 'list[HumanTaskTrigger]',
        'user_form_template': 'UserFormTemplate'
    }

    attribute_map = {
        'assignment_completion_strategy': 'assignmentCompletionStrategy',
        'assignments': 'assignments',
        'display_name': 'displayName',
        'full_template': 'fullTemplate',
        'task_triggers': 'taskTriggers',
        'user_form_template': 'userFormTemplate'
    }

    def __init__(self, assignment_completion_strategy=None, assignments=None, display_name=None, full_template=None, task_triggers=None, user_form_template=None):  # noqa: E501
        """HumanTaskDefinition - a model defined in Swagger"""  # noqa: E501
        self._assignment_completion_strategy = None
        self._assignments = None
        self._display_name = None
        self._full_template = None
        self._task_triggers = None
        self._user_form_template = None
        self.discriminator = None
        if assignment_completion_strategy is not None:
            self.assignment_completion_strategy = assignment_completion_strategy
        if assignments is not None:
            self.assignments = assignments
        if display_name is not None:
            self.display_name = display_name
        if full_template is not None:
            self.full_template = full_template
        if task_triggers is not None:
            self.task_triggers = task_triggers
        if user_form_template is not None:
            self.user_form_template = user_form_template

    @property
    def assignment_completion_strategy(self):
        """Gets the assignment_completion_strategy of this HumanTaskDefinition.  # noqa: E501


        :return: The assignment_completion_strategy of this HumanTaskDefinition.  # noqa: E501
        :rtype: str
        """
        return self._assignment_completion_strategy

    @assignment_completion_strategy.setter
    def assignment_completion_strategy(self, assignment_completion_strategy):
        """Sets the assignment_completion_strategy of this HumanTaskDefinition.


        :param assignment_completion_strategy: The assignment_completion_strategy of this HumanTaskDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = ["LEAVE_OPEN", "TERMINATE"]  # noqa: E501
        if assignment_completion_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `assignment_completion_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(assignment_completion_strategy, allowed_values)
            )

        self._assignment_completion_strategy = assignment_completion_strategy

    @property
    def assignments(self):
        """Gets the assignments of this HumanTaskDefinition.  # noqa: E501


        :return: The assignments of this HumanTaskDefinition.  # noqa: E501
        :rtype: list[HumanTaskAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this HumanTaskDefinition.


        :param assignments: The assignments of this HumanTaskDefinition.  # noqa: E501
        :type: list[HumanTaskAssignment]
        """

        self._assignments = assignments

    @property
    def display_name(self):
        """Gets the display_name of this HumanTaskDefinition.  # noqa: E501


        :return: The display_name of this HumanTaskDefinition.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this HumanTaskDefinition.


        :param display_name: The display_name of this HumanTaskDefinition.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def full_template(self):
        """Gets the full_template of this HumanTaskDefinition.  # noqa: E501


        :return: The full_template of this HumanTaskDefinition.  # noqa: E501
        :rtype: HumanTaskTemplate
        """
        return self._full_template

    @full_template.setter
    def full_template(self, full_template):
        """Sets the full_template of this HumanTaskDefinition.


        :param full_template: The full_template of this HumanTaskDefinition.  # noqa: E501
        :type: HumanTaskTemplate
        """

        self._full_template = full_template

    @property
    def task_triggers(self):
        """Gets the task_triggers of this HumanTaskDefinition.  # noqa: E501


        :return: The task_triggers of this HumanTaskDefinition.  # noqa: E501
        :rtype: list[HumanTaskTrigger]
        """
        return self._task_triggers

    @task_triggers.setter
    def task_triggers(self, task_triggers):
        """Sets the task_triggers of this HumanTaskDefinition.


        :param task_triggers: The task_triggers of this HumanTaskDefinition.  # noqa: E501
        :type: list[HumanTaskTrigger]
        """

        self._task_triggers = task_triggers

    @property
    def user_form_template(self):
        """Gets the user_form_template of this HumanTaskDefinition.  # noqa: E501


        :return: The user_form_template of this HumanTaskDefinition.  # noqa: E501
        :rtype: UserFormTemplate
        """
        return self._user_form_template

    @user_form_template.setter
    def user_form_template(self, user_form_template):
        """Sets the user_form_template of this HumanTaskDefinition.


        :param user_form_template: The user_form_template of this HumanTaskDefinition.  # noqa: E501
        :type: UserFormTemplate
        """

        self._user_form_template = user_form_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HumanTaskDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HumanTaskDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
