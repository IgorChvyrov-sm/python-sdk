# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HumanTaskEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignee': 'HumanTaskUser',
        'claimant': 'HumanTaskUser',
        'created_by': 'str',
        'created_on': 'int',
        'definition_name': 'str',
        'display_name': 'str',
        'human_task_def': 'HumanTaskDefinition',
        'input': 'dict(str, object)',
        'output': 'dict(str, object)',
        'owner_app': 'str',
        'state': 'str',
        'task_id': 'str',
        'task_ref_name': 'str',
        'updated_by': 'str',
        'updated_on': 'int',
        'workflow_id': 'str',
        'workflow_name': 'str'
    }

    attribute_map = {
        'assignee': 'assignee',
        'claimant': 'claimant',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'definition_name': 'definitionName',
        'display_name': 'displayName',
        'human_task_def': 'humanTaskDef',
        'input': 'input',
        'output': 'output',
        'owner_app': 'ownerApp',
        'state': 'state',
        'task_id': 'taskId',
        'task_ref_name': 'taskRefName',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn',
        'workflow_id': 'workflowId',
        'workflow_name': 'workflowName'
    }

    def __init__(self, assignee=None, claimant=None, created_by=None, created_on=None, definition_name=None, display_name=None, human_task_def=None, input=None, output=None, owner_app=None, state=None, task_id=None, task_ref_name=None, updated_by=None, updated_on=None, workflow_id=None, workflow_name=None):  # noqa: E501
        """HumanTaskEntry - a model defined in Swagger"""  # noqa: E501
        self._assignee = None
        self._claimant = None
        self._created_by = None
        self._created_on = None
        self._definition_name = None
        self._display_name = None
        self._human_task_def = None
        self._input = None
        self._output = None
        self._owner_app = None
        self._state = None
        self._task_id = None
        self._task_ref_name = None
        self._updated_by = None
        self._updated_on = None
        self._workflow_id = None
        self._workflow_name = None
        self.discriminator = None
        if assignee is not None:
            self.assignee = assignee
        if claimant is not None:
            self.claimant = claimant
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if definition_name is not None:
            self.definition_name = definition_name
        if display_name is not None:
            self.display_name = display_name
        if human_task_def is not None:
            self.human_task_def = human_task_def
        if input is not None:
            self.input = input
        if output is not None:
            self.output = output
        if owner_app is not None:
            self.owner_app = owner_app
        if state is not None:
            self.state = state
        if task_id is not None:
            self.task_id = task_id
        if task_ref_name is not None:
            self.task_ref_name = task_ref_name
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if workflow_name is not None:
            self.workflow_name = workflow_name

    @property
    def assignee(self):
        """Gets the assignee of this HumanTaskEntry.  # noqa: E501


        :return: The assignee of this HumanTaskEntry.  # noqa: E501
        :rtype: HumanTaskUser
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this HumanTaskEntry.


        :param assignee: The assignee of this HumanTaskEntry.  # noqa: E501
        :type: HumanTaskUser
        """

        self._assignee = assignee

    @property
    def claimant(self):
        """Gets the claimant of this HumanTaskEntry.  # noqa: E501


        :return: The claimant of this HumanTaskEntry.  # noqa: E501
        :rtype: HumanTaskUser
        """
        return self._claimant

    @claimant.setter
    def claimant(self, claimant):
        """Sets the claimant of this HumanTaskEntry.


        :param claimant: The claimant of this HumanTaskEntry.  # noqa: E501
        :type: HumanTaskUser
        """

        self._claimant = claimant

    @property
    def created_by(self):
        """Gets the created_by of this HumanTaskEntry.  # noqa: E501


        :return: The created_by of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this HumanTaskEntry.


        :param created_by: The created_by of this HumanTaskEntry.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this HumanTaskEntry.  # noqa: E501


        :return: The created_on of this HumanTaskEntry.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this HumanTaskEntry.


        :param created_on: The created_on of this HumanTaskEntry.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def definition_name(self):
        """Gets the definition_name of this HumanTaskEntry.  # noqa: E501


        :return: The definition_name of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._definition_name

    @definition_name.setter
    def definition_name(self, definition_name):
        """Sets the definition_name of this HumanTaskEntry.


        :param definition_name: The definition_name of this HumanTaskEntry.  # noqa: E501
        :type: str
        """

        self._definition_name = definition_name

    @property
    def display_name(self):
        """Gets the display_name of this HumanTaskEntry.  # noqa: E501


        :return: The display_name of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this HumanTaskEntry.


        :param display_name: The display_name of this HumanTaskEntry.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def human_task_def(self):
        """Gets the human_task_def of this HumanTaskEntry.  # noqa: E501


        :return: The human_task_def of this HumanTaskEntry.  # noqa: E501
        :rtype: HumanTaskDefinition
        """
        return self._human_task_def

    @human_task_def.setter
    def human_task_def(self, human_task_def):
        """Sets the human_task_def of this HumanTaskEntry.


        :param human_task_def: The human_task_def of this HumanTaskEntry.  # noqa: E501
        :type: HumanTaskDefinition
        """

        self._human_task_def = human_task_def

    @property
    def input(self):
        """Gets the input of this HumanTaskEntry.  # noqa: E501


        :return: The input of this HumanTaskEntry.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this HumanTaskEntry.


        :param input: The input of this HumanTaskEntry.  # noqa: E501
        :type: dict(str, object)
        """

        self._input = input

    @property
    def output(self):
        """Gets the output of this HumanTaskEntry.  # noqa: E501


        :return: The output of this HumanTaskEntry.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this HumanTaskEntry.


        :param output: The output of this HumanTaskEntry.  # noqa: E501
        :type: dict(str, object)
        """

        self._output = output

    @property
    def owner_app(self):
        """Gets the owner_app of this HumanTaskEntry.  # noqa: E501


        :return: The owner_app of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._owner_app

    @owner_app.setter
    def owner_app(self, owner_app):
        """Sets the owner_app of this HumanTaskEntry.


        :param owner_app: The owner_app of this HumanTaskEntry.  # noqa: E501
        :type: str
        """

        self._owner_app = owner_app

    @property
    def state(self):
        """Gets the state of this HumanTaskEntry.  # noqa: E501


        :return: The state of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HumanTaskEntry.


        :param state: The state of this HumanTaskEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "ASSIGNED", "IN_PROGRESS", "COMPLETED", "TIMED_OUT", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def task_id(self):
        """Gets the task_id of this HumanTaskEntry.  # noqa: E501


        :return: The task_id of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this HumanTaskEntry.


        :param task_id: The task_id of this HumanTaskEntry.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def task_ref_name(self):
        """Gets the task_ref_name of this HumanTaskEntry.  # noqa: E501


        :return: The task_ref_name of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._task_ref_name

    @task_ref_name.setter
    def task_ref_name(self, task_ref_name):
        """Sets the task_ref_name of this HumanTaskEntry.


        :param task_ref_name: The task_ref_name of this HumanTaskEntry.  # noqa: E501
        :type: str
        """

        self._task_ref_name = task_ref_name

    @property
    def updated_by(self):
        """Gets the updated_by of this HumanTaskEntry.  # noqa: E501


        :return: The updated_by of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this HumanTaskEntry.


        :param updated_by: The updated_by of this HumanTaskEntry.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this HumanTaskEntry.  # noqa: E501


        :return: The updated_on of this HumanTaskEntry.  # noqa: E501
        :rtype: int
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this HumanTaskEntry.


        :param updated_on: The updated_on of this HumanTaskEntry.  # noqa: E501
        :type: int
        """

        self._updated_on = updated_on

    @property
    def workflow_id(self):
        """Gets the workflow_id of this HumanTaskEntry.  # noqa: E501


        :return: The workflow_id of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this HumanTaskEntry.


        :param workflow_id: The workflow_id of this HumanTaskEntry.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def workflow_name(self):
        """Gets the workflow_name of this HumanTaskEntry.  # noqa: E501


        :return: The workflow_name of this HumanTaskEntry.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this HumanTaskEntry.


        :param workflow_name: The workflow_name of this HumanTaskEntry.  # noqa: E501
        :type: str
        """

        self._workflow_name = workflow_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HumanTaskEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HumanTaskEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
