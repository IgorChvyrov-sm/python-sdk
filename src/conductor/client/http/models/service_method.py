# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'example_input': 'dict(str, object)',
        'id': 'int',
        'input_type': 'str',
        'method_name': 'str',
        'method_type': 'str',
        'operation_name': 'str',
        'output_type': 'str',
        'request_params': 'list[RequestParam]'
    }

    attribute_map = {
        'example_input': 'exampleInput',
        'id': 'id',
        'input_type': 'inputType',
        'method_name': 'methodName',
        'method_type': 'methodType',
        'operation_name': 'operationName',
        'output_type': 'outputType',
        'request_params': 'requestParams'
    }

    def __init__(self, example_input=None, id=None, input_type=None, method_name=None, method_type=None, operation_name=None, output_type=None, request_params=None):  # noqa: E501
        """ServiceMethod - a model defined in Swagger"""  # noqa: E501
        self._example_input = None
        self._id = None
        self._input_type = None
        self._method_name = None
        self._method_type = None
        self._operation_name = None
        self._output_type = None
        self._request_params = None
        self.discriminator = None
        if example_input is not None:
            self.example_input = example_input
        if id is not None:
            self.id = id
        if input_type is not None:
            self.input_type = input_type
        if method_name is not None:
            self.method_name = method_name
        if method_type is not None:
            self.method_type = method_type
        if operation_name is not None:
            self.operation_name = operation_name
        if output_type is not None:
            self.output_type = output_type
        if request_params is not None:
            self.request_params = request_params

    @property
    def example_input(self):
        """Gets the example_input of this ServiceMethod.  # noqa: E501


        :return: The example_input of this ServiceMethod.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._example_input

    @example_input.setter
    def example_input(self, example_input):
        """Sets the example_input of this ServiceMethod.


        :param example_input: The example_input of this ServiceMethod.  # noqa: E501
        :type: dict(str, object)
        """

        self._example_input = example_input

    @property
    def id(self):
        """Gets the id of this ServiceMethod.  # noqa: E501


        :return: The id of this ServiceMethod.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceMethod.


        :param id: The id of this ServiceMethod.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def input_type(self):
        """Gets the input_type of this ServiceMethod.  # noqa: E501


        :return: The input_type of this ServiceMethod.  # noqa: E501
        :rtype: str
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """Sets the input_type of this ServiceMethod.


        :param input_type: The input_type of this ServiceMethod.  # noqa: E501
        :type: str
        """

        self._input_type = input_type

    @property
    def method_name(self):
        """Gets the method_name of this ServiceMethod.  # noqa: E501


        :return: The method_name of this ServiceMethod.  # noqa: E501
        :rtype: str
        """
        return self._method_name

    @method_name.setter
    def method_name(self, method_name):
        """Sets the method_name of this ServiceMethod.


        :param method_name: The method_name of this ServiceMethod.  # noqa: E501
        :type: str
        """

        self._method_name = method_name

    @property
    def method_type(self):
        """Gets the method_type of this ServiceMethod.  # noqa: E501


        :return: The method_type of this ServiceMethod.  # noqa: E501
        :rtype: str
        """
        return self._method_type

    @method_type.setter
    def method_type(self, method_type):
        """Sets the method_type of this ServiceMethod.


        :param method_type: The method_type of this ServiceMethod.  # noqa: E501
        :type: str
        """

        self._method_type = method_type

    @property
    def operation_name(self):
        """Gets the operation_name of this ServiceMethod.  # noqa: E501


        :return: The operation_name of this ServiceMethod.  # noqa: E501
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this ServiceMethod.


        :param operation_name: The operation_name of this ServiceMethod.  # noqa: E501
        :type: str
        """

        self._operation_name = operation_name

    @property
    def output_type(self):
        """Gets the output_type of this ServiceMethod.  # noqa: E501


        :return: The output_type of this ServiceMethod.  # noqa: E501
        :rtype: str
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this ServiceMethod.


        :param output_type: The output_type of this ServiceMethod.  # noqa: E501
        :type: str
        """

        self._output_type = output_type

    @property
    def request_params(self):
        """Gets the request_params of this ServiceMethod.  # noqa: E501


        :return: The request_params of this ServiceMethod.  # noqa: E501
        :rtype: list[RequestParam]
        """
        return self._request_params

    @request_params.setter
    def request_params(self, request_params):
        """Sets the request_params of this ServiceMethod.


        :param request_params: The request_params of this ServiceMethod.  # noqa: E501
        :type: list[RequestParam]
        """

        self._request_params = request_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
