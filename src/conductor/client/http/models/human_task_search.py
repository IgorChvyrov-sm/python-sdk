# coding: utf-8

"""
    Orkes Conductor API Server

    Orkes Conductor API Server  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HumanTaskSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignees': 'list[HumanTaskUser]',
        'claimants': 'list[HumanTaskUser]',
        'definition_names': 'list[str]',
        'display_names': 'list[str]',
        'full_text_query': 'str',
        'search_type': 'str',
        'size': 'int',
        'start': 'int',
        'states': 'list[str]',
        'task_input_query': 'str',
        'task_output_query': 'str',
        'task_ref_names': 'list[str]',
        'update_end_time': 'int',
        'update_start_time': 'int',
        'workflow_ids': 'list[str]',
        'workflow_names': 'list[str]'
    }

    attribute_map = {
        'assignees': 'assignees',
        'claimants': 'claimants',
        'definition_names': 'definitionNames',
        'display_names': 'displayNames',
        'full_text_query': 'fullTextQuery',
        'search_type': 'searchType',
        'size': 'size',
        'start': 'start',
        'states': 'states',
        'task_input_query': 'taskInputQuery',
        'task_output_query': 'taskOutputQuery',
        'task_ref_names': 'taskRefNames',
        'update_end_time': 'updateEndTime',
        'update_start_time': 'updateStartTime',
        'workflow_ids': 'workflowIds',
        'workflow_names': 'workflowNames'
    }

    def __init__(self, assignees=None, claimants=None, definition_names=None, display_names=None, full_text_query=None, search_type=None, size=None, start=None, states=None, task_input_query=None, task_output_query=None, task_ref_names=None, update_end_time=None, update_start_time=None, workflow_ids=None, workflow_names=None):  # noqa: E501
        """HumanTaskSearch - a model defined in Swagger"""  # noqa: E501
        self._assignees = None
        self._claimants = None
        self._definition_names = None
        self._display_names = None
        self._full_text_query = None
        self._search_type = None
        self._size = None
        self._start = None
        self._states = None
        self._task_input_query = None
        self._task_output_query = None
        self._task_ref_names = None
        self._update_end_time = None
        self._update_start_time = None
        self._workflow_ids = None
        self._workflow_names = None
        self.discriminator = None
        if assignees is not None:
            self.assignees = assignees
        if claimants is not None:
            self.claimants = claimants
        if definition_names is not None:
            self.definition_names = definition_names
        if display_names is not None:
            self.display_names = display_names
        if full_text_query is not None:
            self.full_text_query = full_text_query
        if search_type is not None:
            self.search_type = search_type
        if size is not None:
            self.size = size
        if start is not None:
            self.start = start
        if states is not None:
            self.states = states
        if task_input_query is not None:
            self.task_input_query = task_input_query
        if task_output_query is not None:
            self.task_output_query = task_output_query
        if task_ref_names is not None:
            self.task_ref_names = task_ref_names
        if update_end_time is not None:
            self.update_end_time = update_end_time
        if update_start_time is not None:
            self.update_start_time = update_start_time
        if workflow_ids is not None:
            self.workflow_ids = workflow_ids
        if workflow_names is not None:
            self.workflow_names = workflow_names

    @property
    def assignees(self):
        """Gets the assignees of this HumanTaskSearch.  # noqa: E501


        :return: The assignees of this HumanTaskSearch.  # noqa: E501
        :rtype: list[HumanTaskUser]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this HumanTaskSearch.


        :param assignees: The assignees of this HumanTaskSearch.  # noqa: E501
        :type: list[HumanTaskUser]
        """

        self._assignees = assignees

    @property
    def claimants(self):
        """Gets the claimants of this HumanTaskSearch.  # noqa: E501


        :return: The claimants of this HumanTaskSearch.  # noqa: E501
        :rtype: list[HumanTaskUser]
        """
        return self._claimants

    @claimants.setter
    def claimants(self, claimants):
        """Sets the claimants of this HumanTaskSearch.


        :param claimants: The claimants of this HumanTaskSearch.  # noqa: E501
        :type: list[HumanTaskUser]
        """

        self._claimants = claimants

    @property
    def definition_names(self):
        """Gets the definition_names of this HumanTaskSearch.  # noqa: E501


        :return: The definition_names of this HumanTaskSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._definition_names

    @definition_names.setter
    def definition_names(self, definition_names):
        """Sets the definition_names of this HumanTaskSearch.


        :param definition_names: The definition_names of this HumanTaskSearch.  # noqa: E501
        :type: list[str]
        """

        self._definition_names = definition_names

    @property
    def display_names(self):
        """Gets the display_names of this HumanTaskSearch.  # noqa: E501


        :return: The display_names of this HumanTaskSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names):
        """Sets the display_names of this HumanTaskSearch.


        :param display_names: The display_names of this HumanTaskSearch.  # noqa: E501
        :type: list[str]
        """

        self._display_names = display_names

    @property
    def full_text_query(self):
        """Gets the full_text_query of this HumanTaskSearch.  # noqa: E501


        :return: The full_text_query of this HumanTaskSearch.  # noqa: E501
        :rtype: str
        """
        return self._full_text_query

    @full_text_query.setter
    def full_text_query(self, full_text_query):
        """Sets the full_text_query of this HumanTaskSearch.


        :param full_text_query: The full_text_query of this HumanTaskSearch.  # noqa: E501
        :type: str
        """

        self._full_text_query = full_text_query

    @property
    def search_type(self):
        """Gets the search_type of this HumanTaskSearch.  # noqa: E501


        :return: The search_type of this HumanTaskSearch.  # noqa: E501
        :rtype: str
        """
        return self._search_type

    @search_type.setter
    def search_type(self, search_type):
        """Sets the search_type of this HumanTaskSearch.


        :param search_type: The search_type of this HumanTaskSearch.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADMIN", "INBOX"]  # noqa: E501
        if search_type not in allowed_values:
            raise ValueError(
                "Invalid value for `search_type` ({0}), must be one of {1}"  # noqa: E501
                .format(search_type, allowed_values)
            )

        self._search_type = search_type

    @property
    def size(self):
        """Gets the size of this HumanTaskSearch.  # noqa: E501


        :return: The size of this HumanTaskSearch.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this HumanTaskSearch.


        :param size: The size of this HumanTaskSearch.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def start(self):
        """Gets the start of this HumanTaskSearch.  # noqa: E501


        :return: The start of this HumanTaskSearch.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this HumanTaskSearch.


        :param start: The start of this HumanTaskSearch.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def states(self):
        """Gets the states of this HumanTaskSearch.  # noqa: E501


        :return: The states of this HumanTaskSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this HumanTaskSearch.


        :param states: The states of this HumanTaskSearch.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["PENDING", "ASSIGNED", "IN_PROGRESS", "COMPLETED", "TIMED_OUT", "DELETED"]  # noqa: E501
        if not set(states).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `states` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(states) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._states = states

    @property
    def task_input_query(self):
        """Gets the task_input_query of this HumanTaskSearch.  # noqa: E501


        :return: The task_input_query of this HumanTaskSearch.  # noqa: E501
        :rtype: str
        """
        return self._task_input_query

    @task_input_query.setter
    def task_input_query(self, task_input_query):
        """Sets the task_input_query of this HumanTaskSearch.


        :param task_input_query: The task_input_query of this HumanTaskSearch.  # noqa: E501
        :type: str
        """

        self._task_input_query = task_input_query

    @property
    def task_output_query(self):
        """Gets the task_output_query of this HumanTaskSearch.  # noqa: E501


        :return: The task_output_query of this HumanTaskSearch.  # noqa: E501
        :rtype: str
        """
        return self._task_output_query

    @task_output_query.setter
    def task_output_query(self, task_output_query):
        """Sets the task_output_query of this HumanTaskSearch.


        :param task_output_query: The task_output_query of this HumanTaskSearch.  # noqa: E501
        :type: str
        """

        self._task_output_query = task_output_query

    @property
    def task_ref_names(self):
        """Gets the task_ref_names of this HumanTaskSearch.  # noqa: E501


        :return: The task_ref_names of this HumanTaskSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._task_ref_names

    @task_ref_names.setter
    def task_ref_names(self, task_ref_names):
        """Sets the task_ref_names of this HumanTaskSearch.


        :param task_ref_names: The task_ref_names of this HumanTaskSearch.  # noqa: E501
        :type: list[str]
        """

        self._task_ref_names = task_ref_names

    @property
    def update_end_time(self):
        """Gets the update_end_time of this HumanTaskSearch.  # noqa: E501


        :return: The update_end_time of this HumanTaskSearch.  # noqa: E501
        :rtype: int
        """
        return self._update_end_time

    @update_end_time.setter
    def update_end_time(self, update_end_time):
        """Sets the update_end_time of this HumanTaskSearch.


        :param update_end_time: The update_end_time of this HumanTaskSearch.  # noqa: E501
        :type: int
        """

        self._update_end_time = update_end_time

    @property
    def update_start_time(self):
        """Gets the update_start_time of this HumanTaskSearch.  # noqa: E501


        :return: The update_start_time of this HumanTaskSearch.  # noqa: E501
        :rtype: int
        """
        return self._update_start_time

    @update_start_time.setter
    def update_start_time(self, update_start_time):
        """Sets the update_start_time of this HumanTaskSearch.


        :param update_start_time: The update_start_time of this HumanTaskSearch.  # noqa: E501
        :type: int
        """

        self._update_start_time = update_start_time

    @property
    def workflow_ids(self):
        """Gets the workflow_ids of this HumanTaskSearch.  # noqa: E501


        :return: The workflow_ids of this HumanTaskSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflow_ids

    @workflow_ids.setter
    def workflow_ids(self, workflow_ids):
        """Sets the workflow_ids of this HumanTaskSearch.


        :param workflow_ids: The workflow_ids of this HumanTaskSearch.  # noqa: E501
        :type: list[str]
        """

        self._workflow_ids = workflow_ids

    @property
    def workflow_names(self):
        """Gets the workflow_names of this HumanTaskSearch.  # noqa: E501


        :return: The workflow_names of this HumanTaskSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._workflow_names

    @workflow_names.setter
    def workflow_names(self, workflow_names):
        """Sets the workflow_names of this HumanTaskSearch.


        :param workflow_names: The workflow_names of this HumanTaskSearch.  # noqa: E501
        :type: list[str]
        """

        self._workflow_names = workflow_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HumanTaskSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HumanTaskSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
